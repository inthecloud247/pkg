# Maintainer: Nicolas Pouillard <nicolas.pouillard@gmail.com>
# Contributor: Elena ``of Valhalla'' Grandi <elena.valhalla@gmail.com>

# The git-annex assistant requires significantly more dependencies.
# If you do not need the assistant or have build issues try:
# _assistant=0
_assistant=0

_inotify=1
_dbus=1
_xmpp=1
_webdav=1
_test=1
_dns=1
_pairing=1
_webapp=1
_s3=1

# In _cabal_mode=1 cabal install is used to install the missing dependencies
# for git-annex in a temporary local location to not interfer with you
# installation.
# Since core packages are missing from the [haskell] repo, this option
# has to be set to unless you know that you have these packages installed.
_cabal_mode=1
_cabal_flags=( --force-reinstalls )

# Building the documentation requires ikiwiki.
# If you don't want to build the documentation turns this to 0.
_build_docs=0

# When _arch_haskell is set to 1, packages available on the [haskell]
# repo are used (https://github.com/archhaskell/habs).
# [CHECKED on 2012-11-22]
_arch_haskell=1

# When _haskell_web is set to 1, packages available on the [haskell-web]
# repo are used (https://github.com/EffeErre/habs-web).
# [CHECKED as of 2012-11-22]
_haskell_web=1

pkgname=git-annex
pkgver=3.20121211
pkgrel=1
pkgdesc='manage files with git, without checking their contents into git'
arch=('i686' 'x86_64')
url="http://git-annex.branchable.com/"
license=(GPL3)
depends=(git util-linux openssh rsync pcre curl gmp libidn gsasl libxml2)
options=(!makeflags)
conflicts=(git-annex-git)
makedepends=(ghc)

# Note that if network<2.4 is used, then WITH_OLD_URI has to be set
_features=''

(( ! _cabal_mode )) ||
  makedepends=("${makedepends[@]}" cabal-install happy alex)

(( ! _arch_haskell )) ||
  makedepends=("${makedepends[@]}"
              haskell-bloomfilter
              haskell-dataenc
              haskell-edit-distance
              haskell-extensible-exceptions
              haskell-network
              haskell-mtl
              haskell-hslogger
              haskell-http
              haskell-ifelse
              haskell-json
              haskell-lifted-base
              haskell-missingh
              haskell-monad-control
              haskell-pcre-light
              haskell-quickcheck
              haskell-sha
              haskell-text
              haskell-transformers-base
              haskell-utf8-string
              )

_cabal_install=("${_cabal_install[@]}" SafeSemaphore)

(( ! _s3        )) || _features="$_features -DWITH_S3"
(( ! _assistant )) || _features="$_features -DWITH_ASSISTANT"
(( ! _inotify   )) || _features="$_features -DWITH_INOTIFY"
(( ! _webdav    )) || _features="$_features -DWITH_WEBDAV"
(( ! _dbus      )) || _features="$_features -DWITH_DBUS"
(( ! _webapp    )) || _features="$_features -DWITH_WEBAPP"
(( ! _pairing   )) || _features="$_features -DWITH_PAIRING"
(( ! _xmpp      )) || _features="$_features -DWITH_XMPP"
(( ! _dns       )) || _features="$_features -DWITH_DNS"
(( ! _old_yesod )) || _features="$_features -DWITH_OLD_YESOD"

(( ! _s3 || ! _arch_haskell )) ||
  makedepends=("${makedepends[@]}" haskell-hs3)

(( ! _assistant )) ||
  makedepends=("${makedepends[@]}" haskell-stm)

(( ! _inotify || ! _arch_haskell )) ||
  makedepends=("${makedepends[@]}" haskell-hinotify)

(( ! _webdav || ! _cabal_mode )) ||
  _cabal_install=("${_cabal_install[@]}" DAV)

# BROKEN as of 2012-11-29:
#(( ! _webdav || ! _haskell_web )) ||
#  makedepends=("${makedepends[@]}" haskell-http-conduit haskell-xml-conduit)
# in the mean time:
(( ! _webdav || ! _cabal_mode )) ||
  _cabal_install=("${_cabal_install[@]}" http-conduit xml-conduit)

(( ! _dbus || ! _cabal_mode )) ||
  _cabal_install=("${_cabal_install[@]}" dbus)

(( ! _webapp || ! _assistant || ! _arch_haskell )) ||
  makedepends=("${makedepends[@]}"
               haskell-case-insensitive
               haskell-http-types
               haskell-transformers
               haskell-wai
               haskell-warp
               haskell-blaze-builder
               haskell-crypto-api
               haskell-aeson
               haskell-data-default
              )

# BROKEN as of 2012-11-29:
#              haskell-wai-logger
#              haskell-yesod
#              haskell-yesod-static
#              haskell-yesod-default
(( ! _webapp || ! _assistant || ! _haskell_web )) ||
  makedepends=("${makedepends[@]}"
               haskell-hamlet
               haskell-clientsession
              )
# in the mean time:
(( ! _webapp || ! _assistant || ! _cabal_mode )) ||
  _cabal_install=("${_cabal_install[@]}" wai-logger yesod yesod-static yesod-default)

(( ! _webapp || ! _pairing || ! _cabal_mode )) ||
  _cabal_install=("${_cabal_install[@]}"
                  network-multicast
                  network-info)

(( ! _xmpp || ! _assistant || ! _cabal_mode )) ||
  _cabal_install=("${_cabal_install[@]}"
                  network-protocol-xmpp
                  gnutls)

(( ! _xmpp || ! _assistant || ! _haskell_web )) ||
  makedepends=("${makedepends[@]}" haskell-xml-types)

(( ! _xmpp || ! _assistant || ! _dns || ! _cabal_mode )) ||
  _cabal_install=("${_cabal_install[@]}" dns)

(( ! _test || ! _arch_haskell )) ||
  makedepends=("${makedepends[@]}"
               haskell-testpack
               haskell-hunit)

(( ! _build_docs )) || makedepends=("${makedepends[@]}" ikiwiki)

_gitroot=git://git.kitenet.net/git-annex
_gitrepo=git-annex
_ignore='IGNORE=-ignore-package monads-fd -ignore-package monads-tf'

asking() {
  read -p "$@ (Y/n)" answer
  case "$answer" in
    n|N|no|NO|No|nO) false;;
    *) true;;
  esac
}

build() {
  cd $srcdir

  if [ -d $_gitrepo ] ; then
    cd $_gitrepo
    git fetch origin || return 1
    git reset --hard origin/master || return 1
    msg "The local files are updated."
  else
    # --depth=1 should only be used when no merge is done
    git clone "${_gitroot}" $_gitrepo || return 1
  fi
  cd "${srcdir}/$_gitrepo"
  git checkout $pkgver || return 1
  rsync -aH --del "${srcdir}/$_gitrepo/" "${srcdir}/build/" || return 1
  cd "${srcdir}/build"

  msg "GIT checkout done or server timeout"
  msg "Starting make..."

  ORIG_HOME="$HOME"
  ORIG_TMPDIR="$TMPDIR"
  export HOME="${srcdir}/home"
  export TMPDIR="${srcdir}/home/tmp"
  export PATH="$HOME/.cabal/bin:$PATH"
  mkdir -p "$HOME" "$TMPDIR"

  if (( ! _s3 )); then
    git remote add nphub https://github.com/np/git-annex
    git fetch nphub
    git cherry-pick nphub/assistant-without-s3-head
  fi
  sed -i 's/network (>= 2.0)/network (>= 2.4)/' git-annex.cabal

  if (( _cabal_mode )); then
    cabal update
    which c2hs || cabal install c2hs
    cabal install "${_cabal_install[@]}" --user
    cabal install "${_cabal_flags[@]}" --user --only-dependencies
  fi

  make "$_ignore" FEATURES="$_features"
  (( ! _test )) ||
    make "$_ignore" FEATURES="$_features" test ||
    asking "Tests failed. Continue?"
  export HOME="$ORIG_HOME"
  export TMPDIR="$ORIG_TMPDIR"
}

package() {
  cd $srcdir/build
  make "$_ignore" DESTDIR=$pkgdir install
}
